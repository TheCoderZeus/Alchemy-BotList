const { EmbedBuilder, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const DatabaseManager = require('../database/DatabaseManager');

class BotManager {
    constructor() {
        this.db = new DatabaseManager();
    }

    async addBotToQueue(botId, userId, channel) {
        try {
            const bot = this.db.addBot(botId, userId);
            
                    const embed = new EmbedBuilder()
            .setTitle('üìã Solicita√ß√£o de An√°lise Recebida')
            .setDescription(`O bot <@${botId}> foi adicionado com sucesso √† nossa fila de an√°lise. Nossa equipe iniciar√° a avalia√ß√£o em breve para verificar se atende aos padr√µes de qualidade e seguran√ßa da plataforma.\n\nUm t√≥pico dedicado ser√° criado automaticamente para conduzir os testes necess√°rios.`)
            .addFields(
                { name: 'Status Atual', value: 'Aguardando an√°lise', inline: true },
                { name: 'Solicitado por', value: `<@${userId}>`, inline: true },
                { name: 'Pr√≥ximos Passos', value: 'Aguarde a cria√ß√£o do t√≥pico de teste', inline: false }
            )
            .setColor(0x3498db)
            .setTimestamp()
            .setFooter({ text: 'Sistema de Gerenciamento de Bots' });

            await channel.send({ embeds: [embed] });
            
            const topic = await this.createTestTopic(channel, botId);
            this.db.updateBotStatus(botId, 'testing', topic.id);
            this.db.addTopic(topic.id, botId);
            
            return bot;
        } catch (error) {
            throw new Error(`Erro ao adicionar bot: ${error.message}`);
        }
    }

    async createTestTopic(channel, botId) {
        let botName = 'Desconhecido';
        try {
            const botUser = await channel.client.users.fetch(botId);
            botName = botUser.username;
        } catch (error) {
            console.log('Erro ao buscar nome do bot:', error);
        }

        const topic = await channel.threads.create({
            name: `Teste - ${botName} (${botId})`,
            type: ChannelType.PublicThread,
            reason: 'T√≥pico para teste de bot'
        });

        const embed = new EmbedBuilder()
            .setTitle('üî¨ Ambiente de Teste Criado')
            .setDescription(`Este √© o ambiente oficial de teste para an√°lise do bot **${botName}**. Aqui ser√° realizada uma avalia√ß√£o completa das funcionalidades, performance e conformidade com nossos padr√µes.\n\n**Instru√ß√µes para a Equipe:**\nAp√≥s concluir todos os testes necess√°rios, utilize os comandos de decis√£o dispon√≠veis exclusivamente neste t√≥pico.`)
            .addFields(
                { name: 'Bot em Teste', value: `<@${botId}> (${botName})`, inline: true },
                { name: 'Comandos Dispon√≠veis', value: '`.aprovar` - Aceitar o bot na plataforma\n`.reprovar` - Rejeitar a solicita√ß√£o', inline: true },
                { name: 'Status', value: 'An√°lise em andamento', inline: false }
            )
            .setColor(0xe67e22)
            .setTimestamp()
            .setFooter({ text: 'T√≥pico ser√° arquivado automaticamente ap√≥s decis√£o' });

        const deleteButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`delete_topic_${topic.id}`)
                    .setLabel('Excluir T√≥pico')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üóëÔ∏è')
            );

        await topic.send({ 
            content: `<@${botId}> - Bot em teste: **${botName}**`,
            embeds: [embed],
            components: [deleteButton]
        });

        return topic;
    }

    async approveBot(topicId, userId) {
        const bot = this.db.getBotByTopic(topicId);
        if (!bot) {
            throw new Error('Nenhum bot encontrado para este t√≥pico.');
        }

        this.db.updateBotStatus(bot.id, 'approved');
        
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ An√°lise Conclu√≠da - Bot Aprovado')
            .setDescription(`Ap√≥s uma an√°lise detalhada, o bot <@${bot.id}> foi **aprovado** e agora faz parte da nossa plataforma oficial. O bot atendeu a todos os crit√©rios de qualidade, seguran√ßa e funcionalidade estabelecidos.\n\n**Parab√©ns!** O bot est√° agora dispon√≠vel para uso pelos usu√°rios da comunidade.`)
            .addFields(
                { name: 'Decis√£o Tomada Por', value: `<@${userId}>`, inline: true },
                { name: 'Status Final', value: 'Aprovado e Ativo', inline: true },
                { name: 'Data da Aprova√ß√£o', value: new Date().toLocaleDateString('pt-BR'), inline: true }
            )
            .setColor(0x27ae60)
            .setTimestamp()
            .setFooter({ text: 'Este t√≥pico ser√° arquivado em alguns segundos' });

        return { embed, botId: bot.id };
    }

    async rejectBot(topicId, userId) {
        const bot = this.db.getBotByTopic(topicId);
        if (!bot) {
            throw new Error('Nenhum bot encontrado para este t√≥pico.');
        }

        this.db.updateBotStatus(bot.id, 'rejected');
        
        const embed = new EmbedBuilder()
            .setTitle('‚ùå An√°lise Conclu√≠da - Bot N√£o Aprovado')
            .setDescription(`Ap√≥s uma avalia√ß√£o criteriosa, o bot <@${bot.id}> **n√£o foi aprovado** para integra√ß√£o √† nossa plataforma. Infelizmente, alguns aspectos n√£o atenderam aos nossos padr√µes estabelecidos.\n\n**Recomenda√ß√£o:** O desenvolvedor pode corrigir os pontos identificados e solicitar uma nova an√°lise no futuro.`)
            .addFields(
                { name: 'Decis√£o Tomada Por', value: `<@${userId}>`, inline: true },
                { name: 'Status Final', value: 'N√£o Aprovado', inline: true },
                { name: 'Data da Decis√£o', value: new Date().toLocaleDateString('pt-BR'), inline: true }
            )
            .setColor(0xe74c3c)
            .setTimestamp()
            .setFooter({ text: 'Este t√≥pico ser√° arquivado em alguns segundos' });

        return { embed, botId: bot.id };
    }

    getQueueList() {
        const queue = this.db.getBotQueue();
        
        if (queue.length === 0) {
            const embed = new EmbedBuilder()
                .setTitle('üìä Status da Fila de An√°lise')
                .setDescription('**Fila Vazia**\n\nAtualmente n√£o h√° bots aguardando an√°lise em nossa plataforma. Todos os bots solicitados foram processados com sucesso.\n\nPara adicionar um novo bot √† fila, utilize o comando `.add` ou `/add` e siga as instru√ß√µes.')
                .addFields(
                    { name: 'Bots na Fila', value: '0', inline: true },
                    { name: 'Status do Sistema', value: 'Dispon√≠vel para novas solicita√ß√µes', inline: true }
                )
                .setColor(0x95a5a6)
                .setTimestamp()
                .setFooter({ text: 'Sistema de Gerenciamento de Bots' });
            return embed;
        }

        const description = `**Bots Aguardando An√°lise**\n\nEsta √© a lista atual de bots que est√£o aguardando revis√£o e aprova√ß√£o pela nossa equipe. Cada bot passar√° por um processo rigoroso de teste antes da decis√£o final.\n\n${queue.map((bot, index) => 
            `**${index + 1}.** <@${bot.id}>\n‚îî Solicitado por: <@${bot.addedBy}>\n‚îî Data: ${new Date(bot.addedAt).toLocaleDateString('pt-BR')}`
        ).join('\n\n')}`;

        const embed = new EmbedBuilder()
            .setTitle('üìä Fila de An√°lise de Bots')
            .setDescription(description)
            .addFields(
                { name: 'Total na Fila', value: queue.length.toString(), inline: true },
                { name: 'Status', value: 'Processando solicita√ß√µes', inline: true },
                { name: 'Tempo M√©dio', value: 'Varia conforme complexidade', inline: true }
            )
            .setColor(0x3498db)
            .setTimestamp()
            .setFooter({ text: `Sistema de Gerenciamento de Bots ‚Ä¢ ${queue.length} bot${queue.length > 1 ? 's' : ''} na fila` });

        return embed;
    }

    async deleteTopic(topicId, userId) {
        try {
            const bot = this.db.getBotByTopic(topicId);
            if (bot) {
                this.db.removeBot(bot.id);
            }
            
            return {
                success: true,
                message: 'T√≥pico ser√° exclu√≠do em alguns segundos.'
            };
        } catch (error) {
            return {
                success: false,
                message: `Erro ao excluir t√≥pico: ${error.message}`
            };
        }
    }
}

module.exports = BotManager;
